(merge {:b 4} {:b 8} {:b 32 :e 42})
(exit)
(defn update-window-2 [msg window sum max-size]
  (let [candidate-window (conj window msg)
        candidate-sum (+ sum (:spam-score msg))
        first-score (:spam-score (first window))]
   (if (> (count candidate-window) max-size)
     [(subvec candidate-window 1) (- candidate-sum first-score)]
     [candidate-window candidate-sum]))
)
(def window [ {:email-address "a@letters.com" :spam-score 0.4}
  {:email-address "b@letters.com" :spam-score 0.2}])
window
(clojure.pprint/pprint window)
(def max-size 3)
(def sum 0.6)
(def msg  {:email-address "c@letters.com" :spam-score 0.2})
(clojure.pprint/pprint (update-window-2 msg window sum max-size))
(clojure.pprint/pprint window)
(def [window sum] (update-window-2 msg window sum max-size))
(def new-win-data (update-window-2 msg window sum max-size))
new-win-data
(clojure.pprint/pprint new-win-data)
(def window (first new-win-data))
(def sum (second new-win-data))
window
sum
(def new-win-data (update-window-2 msg window sum max-size))
(clojure.pprint/pprint new-win-data)
(def msg  {:email-address "d@letters.com" :spam-score 0.006})
(def new-win-data (update-window-2 msg window sum max-size))
(clojure.pprint/pprint new-win-data)
(def window (first new-win-data))
(def sum (second new-win-data))
window
sum
(def msg  {:email-address "e@letters.com" :spam-score 0.04})
(def new-win-data (update-window-2 msg window sum max-size))
(clojure.pprint/pprint new-win-data)
(def window (first new-win-data))
(def sum (second new-win-data))
(def msg   {:email-address "f@letters.com" :spam-score 0.11})
(def new-win-data (update-window-2 msg window sum max-size))
(clojure.pprint/pprint new-win-data)
(+ 0.006 0.04 0.11)
(- (+ 0.246 0.11) 0.2)
(exit)
(+ 0.009693557396531105 0.02036639954894781 0.00396728515625 0.067413330078125)
run 32
(main 32)
(exit)
